Img tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [0., 0., 0.,  ..., 0., 0., 1.],
          [1., 1., 1.,  ..., 1., 0., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 0., 0.,  ..., 1., 0., 1.],
          [1., 1., 1.,  ..., 1., 0., 1.]]],
        [[[1., 0., 1.,  ..., 1., 1., 1.],
          [1., 0., 1.,  ..., 1., 0., 1.],
          [1., 0., 1.,  ..., 1., 0., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 0., 1.],
          [0., 0., 1.,  ..., 1., 0., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]]],
        [[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 0., 0.,  ..., 0., 0., 1.],
          [1., 1., 1.,  ..., 1., 0., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [0., 0., 1.,  ..., 1., 0., 0.],
          [1., 1., 1.,  ..., 1., 1., 1.]]],
        ...,
        [[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 0., 0.,  ..., 0., 0., 0.],
          [1., 1., 1.,  ..., 1., 0., 1.],
          ...,
          [1., 0., 1.,  ..., 1., 0., 1.],
          [1., 0., 0.,  ..., 1., 0., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]]],
        [[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 0., 0.,  ..., 1., 0., 1.],
          [1., 1., 1.,  ..., 1., 0., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 0., 1.,  ..., 0., 0., 1.],
          [1., 0., 1.,  ..., 1., 1., 1.]]],
        [[[1., 1., 1.,  ..., 1., 1., 1.],
          [0., 0., 1.,  ..., 1., 0., 0.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 0., 1.],
          [1., 0., 1.,  ..., 0., 0., 1.],
          [1., 0., 1.,  ..., 1., 1., 1.]]]], device='cuda:0')
Out tensor([[[[ 0.1720,  0.0697, -0.0231],
          [ 0.1945, -0.0268, -0.0268],
          [-0.0404, -0.0615, -0.0400]],
         [[-0.0481, -0.0686, -0.0464],
          [ 0.0598,  0.0684,  0.1018],
          [ 0.1963, -0.0094,  0.0430]],
         [[-0.0089,  0.1933,  0.0868],
          [-0.0735, -0.0435,  0.0611],
          [-0.0331, -0.0478, -0.0577]],
         ...,
         [[ 0.0179,  0.0676, -0.0498],
          [ 0.0478,  0.0170,  0.0444],
          [-0.0436,  0.0164, -0.0265]],
         [[-0.0365,  0.0616, -0.0270],
          [ 0.0818,  0.1995,  0.0813],
          [-0.0335,  0.1002, -0.0363]],
         [[-0.0171, -0.0392,  0.0447],
          [-0.0413,  0.1298,  0.0015],
          [-0.0322, -0.0083, -0.0435]]],
        [[[-0.0327,  0.0126, -0.0383],
          [-0.0038,  0.0454,  0.0337],
          [-0.0215, -0.0134,  0.0331]],
         [[-0.0281,  0.0581, -0.0458],
          [ 0.0798, -0.0472, -0.0486],
          [ 0.0273, -0.0379, -0.0432]],
         [[-0.0352,  0.0546,  0.0042],
          [-0.0423, -0.0625,  0.1563],
          [-0.0336, -0.0468,  0.0596]],
         ...,
         [[-0.0423, -0.0620, -0.0372],
          [-0.0024,  0.0784, -0.0396],
          [-0.0383,  0.0612,  0.0364]],
         [[-0.0428, -0.0428, -0.0428],
          [-0.0428, -0.0428, -0.0428],
          [-0.0428, -0.0428, -0.0428]],
         [[-0.0232, -0.0232, -0.0232],
          [-0.0232, -0.0232, -0.0232],
          [-0.0232, -0.0232, -0.0232]]],
        [[[ 0.0633,  0.0343,  0.0107],
          [ 0.0009, -0.0612, -0.0342],
          [-0.0357, -0.0576, -0.0286]],
         [[-0.0339, -0.0339, -0.0339],
          [-0.0339, -0.0339, -0.0339],
          [-0.0339, -0.0339, -0.0339]],
         [[-0.0145, -0.0593,  0.0150],
          [-0.0484, -0.0827, -0.0331],
          [-0.0396, -0.0163, -0.0411]],
         ...,
         [[-0.0390,  0.1303,  0.0170],
          [-0.0390,  0.1106,  0.0257],
          [-0.0070, -0.0036,  0.0007]],
         [[-0.0428, -0.0428, -0.0428],
          [-0.0428, -0.0428, -0.0428],
          [-0.0428, -0.0428, -0.0428]],
         [[-0.0260, -0.0497, -0.0399],
          [-0.0431,  0.0013, -0.0237],
          [-0.0332, -0.0417, -0.0269]]],
        ...,
        [[[-0.0211, -0.0211, -0.0211],
          [-0.0211, -0.0211, -0.0211],
          [-0.0211, -0.0211, -0.0211]],
         [[-0.0339, -0.0339, -0.0339],
          [-0.0339, -0.0339, -0.0339],
          [-0.0339, -0.0339, -0.0339]],
         [[-0.0484, -0.0356, -0.0309],
          [-0.0502,  0.0399,  0.0485],
          [ 0.0006,  0.0850,  0.0619]],
         ...,
         [[-0.0347, -0.0347, -0.0347],
          [-0.0347, -0.0347, -0.0347],
          [-0.0347, -0.0347, -0.0347]],
         [[ 0.0058,  0.0364, -0.0286],
          [ 0.0938,  0.0667, -0.0453],
          [-0.0454, -0.0440, -0.0387]],
         [[-0.0232, -0.0232, -0.0232],
          [-0.0232, -0.0232, -0.0232],
          [-0.0232, -0.0232, -0.0232]]],
        [[[-0.0211, -0.0211, -0.0211],
          [-0.0211, -0.0211, -0.0211],
          [-0.0211, -0.0211, -0.0211]],
         [[-0.0445, -0.0398, -0.0196],
          [-0.0392,  0.0172,  0.0220],
          [ 0.1082,  0.1048, -0.0244]],
         [[-0.0326, -0.0326, -0.0326],
          [-0.0326, -0.0326, -0.0326],
          [-0.0326, -0.0326, -0.0326]],
         ...,
         [[-0.0373, -0.0439,  0.0064],
          [-0.0421, -0.0352, -0.0063],
          [-0.0296, -0.0501, -0.0462]],
         [[-0.0083,  0.1314,  0.0007],
          [ 0.0924,  0.1673, -0.0488],
          [-0.0318, -0.0565, -0.0463]],
         [[-0.0297, -0.0479,  0.0013],
          [-0.0277,  0.0641,  0.1216],
          [ 0.0480,  0.1199,  0.0604]]],
        [[[ 0.0570, -0.0371, -0.0335],
          [-0.0382, -0.0284, -0.0584],
          [-0.0021, -0.0545, -0.0456]],
         [[-0.0477, -0.0505, -0.0391],
          [-0.0601, -0.0393, -0.0410],
          [ 0.0627,  0.1358, -0.0352]],
         [[ 0.0188,  0.0029,  0.0106],
          [-0.0336, -0.0521, -0.0005],
          [ 0.0163, -0.0349,  0.0299]],
         ...,
         [[-0.0397,  0.0329,  0.0092],
          [ 0.0481, -0.0450, -0.0403],
          [-0.0456, -0.0356, -0.0533]],
         [[-0.0202,  0.0136, -0.0131],
          [ 0.0756,  0.2099, -0.0260],
          [ 0.0060,  0.0125,  0.0057]],
         [[-0.0066,  0.0026, -0.0237],
          [ 0.0402,  0.0788,  0.0331],
          [-0.0049,  0.1382,  0.0087]]]], device='cuda:0',
       grad_fn=<CudnnBatchNormBackward>)
out2 tensor([[ 0.1720,  0.0697, -0.0231,  ..., -0.0322, -0.0083, -0.0435],
        [-0.0327,  0.0126, -0.0383,  ..., -0.0232, -0.0232, -0.0232],
        [ 0.0633,  0.0343,  0.0107,  ..., -0.0332, -0.0417, -0.0269],
        ...,
        [-0.0211, -0.0211, -0.0211,  ..., -0.0232, -0.0232, -0.0232],
        [-0.0211, -0.0211, -0.0211,  ...,  0.0480,  0.1199,  0.0604],
        [ 0.0570, -0.0371, -0.0335,  ..., -0.0049,  0.1382,  0.0087]],
       device='cuda:0', grad_fn=<ViewBackward>)
/home/pierre/miniconda3/envs/robust/lib/python3.8/site-packages/torch/nn/functional.py:1709: UserWarning: nn.functional.sigmoid is deprecated. Use torch.sigmoid instead.
  warnings.warn("nn.functional.sigmoid is deprecated. Use torch.sigmoid instead.")
Traceback (most recent call last):
  File "wgan_gp.py", line 144, in <module>
    real_validity = discriminator(real_imgs)
  File "/home/pierre/miniconda3/envs/robust/lib/python3.8/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/pierre/Git/gamegan/src/gan/gan_utils.py", line 114, in forward
    validity = self.adv_layer(out)
  File "/home/pierre/miniconda3/envs/robust/lib/python3.8/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/pierre/miniconda3/envs/robust/lib/python3.8/site-packages/torch/nn/modules/linear.py", line 94, in forward
    return F.linear(input, self.weight, self.bias)
  File "/home/pierre/miniconda3/envs/robust/lib/python3.8/site-packages/torch/nn/functional.py", line 1753, in linear
    return torch._C._nn.linear(input, weight, bias)
RuntimeError: mat1 dim 1 must match mat2 dim 0